{"version":3,"file":"static/js/829.209ac7f4.chunk.js","mappings":"yPAEAA,OAAOC,MAAQA,EAAAA,EAEfA,EAAAA,EAAAA,SAAAA,QAAA,gCACA,yBAEaC,EAAb,WAGE,cAAe,+DALL,qCAMRC,KAAKC,SAAW,kCAChBD,KAAKE,WACH,+HACH,CAPH,kFASE,WAAuBC,GAAvB,kFACQC,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPG,KAAMA,IAHV,SAMyBL,EAAAA,EAAAA,IAAU,qBAAsB,CAAEM,OAAAA,IAN3D,uBAMUG,EANV,EAMUA,KANV,kBAOSA,GAPT,gDATF,uHAmBE,WAAsBC,EAAOL,GAA7B,kFACQC,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPQ,MAAOA,EACPL,KAAMA,EACNM,SAAU,QACVC,eAAe,IANnB,SASyBZ,EAAAA,EAAAA,IAAU,gBAAiB,CAAEM,OAAAA,IATtD,uBASUG,EATV,EASUA,KATV,kBAUSA,GAVT,gDAnBF,sHAgCE,WAAmBI,GAAnB,8EACQP,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPS,SAAU,QACVC,eAAe,IAJnB,SAMeE,MAAM,sCAAD,OACsBD,EADtB,YAC4BP,IAC5CS,MAAK,SAAAC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,0CAElB,OAAOF,EAASG,MACjB,IAbH,wFAhCF,oHAgDE,WAAmBN,GAAnB,kFACQP,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPS,SAAU,UAHd,SAKyBX,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,oBAAiCP,IAL1D,uBAKUG,EALV,EAKUA,KALV,kBAMSA,EAAKW,MANd,gDAhDF,sHAyDE,WAAqBP,GAArB,kFACQP,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPS,SAAU,UAHd,SAKyBX,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,oBAAiCP,IAL1D,uBAKUG,EALV,EAKUA,KALV,kBAMSA,EAAKY,SANd,gDAzDF,8DAmEaC,EAAa,IAAIrB,C,qJCxEjBsB,EAAcC,EAAAA,GAAAA,GAAH,kJASXC,EAAaD,EAAAA,GAAAA,GAAH,gHAMVE,EAASF,EAAAA,GAAAA,EAAH,0JASNG,EAAUH,EAAAA,GAAAA,EAAH,wFAMPI,EAAgBJ,EAAAA,GAAAA,EAAH,4F,SCc1B,EAjCe,WACb,IAAQX,GAAOgB,EAAAA,EAAAA,MAAPhB,GACR,GAA8BiB,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,IAJAC,EAAAA,EAAAA,YAAU,WACRX,EAAAA,EAAAA,eAA0BT,GAAIE,KAAKiB,EACpC,GAAE,CAACnB,IAEY,OAAZkB,EAIJ,OACE,yBACsB,IAAnBA,EAAQG,QACP,SAACX,EAAD,UACGQ,EAAQI,KAAI,SAAAC,GAAE,OACb,UAACX,EAAD,YACE,UAACC,EAAD,sBAAiBU,EAAGC,OAApB,QACA,SAACV,EAAD,UAAUS,EAAGE,YAFEF,EAAGvB,GADP,OAQjB,UAACe,EAAD,WACG,IADH,6CAE2C,SAAC,MAAD,QAKlD,C","sources":["Api/fetchAPI.js","components/Review/Review.styled.jsx","components/Review/Review.jsx"],"sourcesContent":["import axios from 'axios';\n\nwindow.axios = axios;\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst KEY = '663bd5fd8d905b7ce2d57e9867d3492e';\n\nexport class ThemoviedbAPI {\n  #API_KEY = KEY;\n\n  constructor() {\n    this.BASE_URL = 'https://image.tmdb.org/t/p/w500';\n    this.defaultImg =\n      'https://m.media-amazon.com/images/M/MV5BMTRkZGE0YWYtMDFhOS00N2I4LTljMTMtYjk0MTI2YmVhOTU4XkEyXkFqcGdeQXVyNjgxNzM0NDI@._V1_.jpg';\n  }\n\n  async getPopularMovies(page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      page: page,\n    });\n\n    const { data } = await axios.get('trending/movie/day', { params });\n    return data;\n  }\n\n  async getMovieByQuery(query, page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      query: query,\n      page: page,\n      language: 'en-US',\n      include_adult: false,\n    });\n\n    const { data } = await axios.get('/search/movie', { params });\n    return data;\n  }\n\n  async getMovieById(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n      include_adult: false,\n    });\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${id}?${params}`\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error('Oops, there is no movie with that name');\n      }\n      return response.json();\n    });\n  }\n\n  async getMovieCast(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/credits?${params}`);\n    return data.cast;\n  }\n\n  async getMovieReview(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/reviews?${params}`);\n    return data.results;\n  }\n}\n\nexport const fetchMovie = new ThemoviedbAPI();\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  align-items: stretch;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 36px;\n`;\n\nexport const ReviewItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  gap: 36px;\n`;\nexport const Author = styled.p`\n  color: #3939d7;\n  font-weight: 600;\n  font-size: 18px;\n  font-style: italic;\n  /* display: flex;\n  width: max-content; */\n`;\n\nexport const Content = styled.p`\n  font-size: 16px;\n  text-indent: 5%;\n  text-align: justify;\n`;\n\nexport const NoReviewsText = styled.p`\n  margin-top: 24px;\n  margin-bottom: 24px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ImSad } from 'react-icons/im';\n\nimport { fetchMovie } from '../../Api/fetchAPI';\nimport {\n  ReviewsList,\n  ReviewItem,\n  Author,\n  Content,\n  NoReviewsText,\n} from './Review.styled';\n\nconst Review = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    fetchMovie.getMovieReview(id).then(setReviews);\n  }, [id]);\n\n  if (reviews === null) {\n    return;\n  }\n\n  return (\n    <div>\n      {reviews.length !== 0 ? (\n        <ReviewsList>\n          {reviews.map(el => (\n            <ReviewItem key={el.id}>\n              <Author>Author: {el.author} </Author>\n              <Content>{el.content}</Content>\n            </ReviewItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <NoReviewsText>\n          {' '}\n          We don't have any reviews for this movie <ImSad />\n        </NoReviewsText>\n      )}\n    </div>\n  );\n};\n\nexport default Review;\n"],"names":["window","axios","ThemoviedbAPI","this","BASE_URL","defaultImg","page","params","URLSearchParams","api_key","data","query","language","include_adult","id","fetch","then","response","ok","Error","json","cast","results","fetchMovie","ReviewsList","styled","ReviewItem","Author","Content","NoReviewsText","useParams","useState","reviews","setReviews","useEffect","length","map","el","author","content"],"sourceRoot":""}